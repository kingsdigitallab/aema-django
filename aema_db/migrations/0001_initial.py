# -*- coding: utf-8 -*-


from django.db import migrations, models
import django.contrib.gis.db.models.fields


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AbrazoFernandoRaw',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('word', models.CharField(max_length=500, null=True, blank=True)),
                ('nr', models.CharField(max_length=1000, null=True, blank=True)),
                ('source', models.CharField(max_length=1000, null=True, blank=True)),
                ('context', models.TextField(null=True, blank=True)),
                ('leptonic', models.CharField(max_length=1000, null=True, blank=True)),
                ('pie_etymology', models.CharField(max_length=1000, null=True, blank=True)),
                ('ie_etymology', models.CharField(max_length=1000, null=True, blank=True)),
                ('gaulish', models.CharField(max_length=1000, null=True, blank=True)),
                ('proto_celtic_etymology', models.CharField(max_length=1000, null=True, blank=True)),
                ('celtic_etymology', models.CharField(max_length=1000, null=True, blank=True)),
                ('celtic_cognates', models.CharField(max_length=1000, null=True, blank=True)),
                ('galatian', models.CharField(max_length=1000, null=True, blank=True)),
                ('morphology', models.CharField(max_length=1000, null=True, blank=True)),
                ('syntax', models.CharField(max_length=1000, null=True, blank=True)),
                ('semantic', models.CharField(max_length=1000, null=True, blank=True)),
                ('other_hispano_celtic', models.CharField(max_length=1000, null=True, blank=True)),
                ('other_hispano_celtic_2', models.CharField(max_length=1000, null=True, blank=True)),
                ('phonology', models.CharField(max_length=1000, null=True, blank=True)),
                ('script', models.CharField(max_length=1000, null=True, blank=True)),
                ('irish', models.CharField(max_length=1000, null=True, blank=True)),
                ('welsh', models.CharField(max_length=1000, null=True, blank=True)),
                ('cornish', models.CharField(max_length=1000, null=True, blank=True)),
                ('breton', models.CharField(max_length=1000, null=True, blank=True)),
                ('cont_celtic', models.CharField(max_length=1000, null=True, blank=True)),
                ('cont_celtic_2', models.CharField(max_length=1000, null=True, blank=True)),
                ('cumbric', models.CharField(max_length=1000, null=True, blank=True)),
                ('brittonic', models.CharField(max_length=1000, null=True, blank=True)),
                ('insular_celtic', models.CharField(max_length=1000, null=True, blank=True)),
                ('pictish_celtic', models.CharField(max_length=1000, null=True, blank=True)),
                ('pictish_celtic_2', models.CharField(max_length=1000, null=True, blank=True)),
                ('scottish_gaelic', models.CharField(max_length=1000, null=True, blank=True)),
                ('scottish_gaelic_2', models.CharField(max_length=1000, null=True, blank=True)),
                ('manx', models.CharField(max_length=1000, null=True, blank=True)),
                ('goidelic', models.CharField(max_length=1000, null=True, blank=True)),
                ('findspot', models.CharField(max_length=1000, null=True, blank=True)),
                ('mod_province', models.CharField(max_length=1000, null=True, blank=True)),
                ('materials', models.CharField(max_length=1000, null=True, blank=True)),
                ('type', models.CharField(max_length=1000, null=True, blank=True)),
                ('dates', models.CharField(max_length=1000, null=True, blank=True)),
                ('bibliography', models.CharField(max_length=1000, null=True, blank=True)),
                ('lon', models.FloatField(null=True, blank=True)),
                ('lat', models.FloatField(null=True, blank=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
            ],
            options={
                'verbose_name': 'Celtiberian Word',
                'verbose_name_plural': 'Celtiberian Words',
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('area_name', models.CharField(max_length=100, null=True, blank=True)),
                ('region', models.CharField(max_length=100, null=True, blank=True)),
                ('country', models.CharField(max_length=100, null=True, blank=True)),
            ],
            options={
                'ordering': ('area_name', 'id'),
            },
        ),
        migrations.CreateModel(
            name='Bibliography',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('reference', models.CharField(max_length=300, null=True, blank=True)),
                ('year', models.IntegerField(null=True, blank=True)),
                ('years', models.CharField(max_length=300, null=True, blank=True)),
                ('title', models.TextField(null=True, blank=True)),
                ('editors', models.TextField(null=True, blank=True)),
                ('place_of_publication', models.CharField(max_length=300, null=True, blank=True)),
                ('publisher', models.CharField(max_length=300, null=True, blank=True)),
                ('no_of_pages', models.CharField(max_length=300, null=True, blank=True)),
                ('volume', models.CharField(max_length=200, null=True, blank=True)),
                ('page_numbers', models.CharField(max_length=200, null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='BurialDates',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('approx_uncalibrated_date_bp', models.IntegerField()),
                ('error_margin', models.IntegerField()),
            ],
            options={
                'ordering': ('approx_uncalibrated_date_bp', 'error_margin'),
            },
        ),
        migrations.CreateModel(
            name='BurialImage',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=200)),
                ('image', models.ImageField(upload_to=b'static/media/uploads/Burial/')),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='BurialImageType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='BurialIndividualDates',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('approx_uncalibrated_date_bp', models.IntegerField()),
                ('error_margin', models.IntegerField()),
            ],
            options={
                'ordering': ('approx_uncalibrated_date_bp', 'error_margin'),
            },
        ),
        migrations.CreateModel(
            name='BurialIndividuals',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('burial_type', models.CharField(blank=True, max_length=2, null=True, choices=[(b'CR', b'Cremation'), (b'IH', b'Inhumation'), (b'MX', b'Mixed')])),
                ('gender', models.CharField(default=b'NI', max_length=2, null=True, blank=True, choices=[(b'MA', b'Male'), (b'MU', b'Male uncertain'), (b'FE', b'Female'), (b'FU', b'Female uncertain'), (b'CH', b'Child'), (b'NI', b'Not identified')])),
                ('age', models.CharField(default=b'NI', max_length=2, null=True, blank=True, choices=[(b'FT', b'Foetus'), (b'NT', b'Neonate'), (b'IF', b'Infant less than 3'), (b'CH', b'Child 3 to 13'), (b'SA', b'Sub adult 14 to 17'), (b'AD', b'Adult 18 to 39'), (b'OA', b'Old adult over 40'), (b'NI', b'Not identified')])),
                ('usage', models.CharField(blank=True, max_length=2, null=True, choices=[(b'PU', b'Primary'), (b'SU', b'Secondary'), (b'NK', b'Not known')])),
                ('location_in_grave', models.CharField(max_length=200, null=True, blank=True)),
                ('position', models.CharField(blank=True, max_length=2, null=True, choices=[(b'PR', b'Prone'), (b'SU', b'Supine'), (b'CL', b'Crouched left'), (b'CR', b'Crouched right'), (b'CO', b'Crouched'), (b'EX', b'Extended'), (b'FL', b'Flexed left'), (b'FR', b'Flexed right'), (b'FX', b'Flexed'), (b'UR', b'Urned'), (b'UU', b'Unurned'), (b'RD', b'Redeposited'), (b'DS', b'Disturbed'), (b'DI', b'Disarticulated')])),
                ('orientation', models.CharField(blank=True, max_length=2, null=True, choices=[(b'NS', b'North to South'), (b'EW', b'East to West'), (b'NW', b'Northwest to Southeast'), (b'NE', b'Northeast to Southwest'), (b'ES', b'East southeast to West northwest'), (b'WS', b'West southwest to East northeast')])),
                ('head_position', models.CharField(blank=True, max_length=2, null=True, choices=[(b'N', b'North'), (b'S', b'South'), (b'E', b'East'), (b'W', b'West'), (b'NW', b'Northwest'), (b'NE', b'Northeast'), (b'SW', b'Southwest'), (b'SE', b'Southeast'), (b'EN', b'East northeast'), (b'WN', b'West northwest'), (b'ES', b'East southeast'), (b'WS', b'West southwest')])),
                ('head_direction', models.CharField(blank=True, max_length=2, null=True, choices=[(b'N', b'North'), (b'S', b'South'), (b'E', b'East'), (b'W', b'West'), (b'NW', b'Northwest'), (b'NE', b'Northeast'), (b'SW', b'Southwest'), (b'SE', b'Southeast'), (b'EN', b'East northeast'), (b'WN', b'West northwest'), (b'ES', b'East southeast'), (b'WS', b'West southwest')])),
                ('date_ref', models.CharField(max_length=30, null=True, blank=True)),
                ('uncalibrated_date_bp', models.CharField(max_length=100, null=True, blank=True)),
                ('uncalibrated_date_bc', models.CharField(max_length=100, null=True, blank=True)),
                ('calibrated_date_bc_1_sigma', models.CharField(max_length=50, null=True, blank=True)),
                ('calibrated_date_bc_2_sigma', models.CharField(max_length=50, null=True, blank=True)),
                ('general_chronology', models.CharField(max_length=50, null=True, blank=True)),
                ('raw_notes', models.TextField(null=True, blank=True)),
            ],
            options={
                'verbose_name_plural': 'Burial Individuals',
            },
        ),
        migrations.CreateModel(
            name='BurialPosition',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('short_desc', models.CharField(max_length=2, null=True, blank=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='Burials',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('date_ref', models.CharField(max_length=50, null=True, blank=True)),
                ('site', models.CharField(max_length=100, null=True, blank=True)),
                ('area', models.CharField(max_length=100, null=True, blank=True)),
                ('region', models.CharField(max_length=50, null=True, blank=True)),
                ('country', models.CharField(max_length=50, null=True, blank=True)),
                ('lon', models.FloatField(null=True, blank=True)),
                ('lat', models.FloatField(null=True, blank=True)),
                ('organic_material', models.CharField(max_length=50, null=True, blank=True)),
                ('organic_material_sub_type', models.CharField(max_length=50, null=True, blank=True)),
                ('site_type', models.CharField(max_length=50, null=True, blank=True)),
                ('cemetery', models.NullBooleanField()),
                ('usage', models.CharField(blank=True, max_length=b'2', null=True, choices=[(b'MP', b'Multi period'), (b'SP', b'Single period')])),
                ('funerary_context', models.TextField(null=True, blank=True)),
                ('burial_type', models.CharField(blank=True, max_length=b'2', null=True, choices=[(b'CR', b'Cremation'), (b'IH', b'Inhumation'), (b'MX', b'Mixed')])),
                ('burial_summary', models.TextField(null=True, blank=True)),
                ('skeleton_summary', models.TextField(null=True, blank=True)),
                ('minimum_no_individuals', models.IntegerField(null=True, blank=True)),
                ('date_summary', models.CharField(max_length=200, null=True, blank=True)),
                ('coords', models.CharField(max_length=50, null=True, blank=True)),
                ('no_of_grave_goods', models.IntegerField(help_text=b'Redundant - to be replaced/moved', null=True, blank=True)),
                ('gender', models.CharField(max_length=20, null=True, blank=True)),
                ('age', models.CharField(help_text=b'Redundant - to be replaced/moved', max_length=20, null=True, blank=True)),
                ('pot', models.CharField(max_length=20, null=True, blank=True)),
                ('pot_bool', models.NullBooleanField(default=False, verbose_name=b'Pot')),
                ('arrowhead', models.CharField(max_length=20, null=True, blank=True)),
                ('arrowhead_bool', models.NullBooleanField(default=False, verbose_name=b'Arrowhead')),
                ('dagger', models.CharField(max_length=20, null=True, blank=True)),
                ('dagger_bool', models.NullBooleanField(default=False, verbose_name=b'Dagger')),
                ('wristguard', models.CharField(max_length=20, null=True, blank=True)),
                ('wristguard_bool', models.NullBooleanField(default=False, verbose_name=b'Wristguard')),
                ('flint_or_stone', models.CharField(max_length=20, null=True, blank=True)),
                ('flint_or_stone_bool', models.NullBooleanField(default=False, verbose_name=b'Flint or Stone')),
                ('bone_object', models.CharField(max_length=20, null=True, blank=True)),
                ('bone_object_bool', models.NullBooleanField(default=False, verbose_name=b'Bone object')),
                ('jewellery', models.CharField(max_length=20, null=True, blank=True)),
                ('jewellery_bool', models.NullBooleanField(default=False, verbose_name=b'Jewellery')),
                ('weapons', models.CharField(max_length=20, null=True, blank=True)),
                ('weapons_bool', models.NullBooleanField(default=False, verbose_name=b'Weapons')),
                ('gold_silver', models.CharField(max_length=20, null=True, blank=True)),
                ('gold_silver_bool', models.NullBooleanField(default=False, verbose_name=b'Gold and Silver')),
                ('faience', models.CharField(max_length=20, null=True, blank=True)),
                ('faience_bool', models.NullBooleanField(default=False, verbose_name=b'Faience')),
                ('amber', models.CharField(max_length=20, null=True, blank=True)),
                ('amber_bool', models.NullBooleanField(default=False, verbose_name=b'Amber')),
                ('cu_cu_alloy', models.CharField(max_length=20, null=True, blank=True)),
                ('cu_cu_alloy_bool', models.NullBooleanField(default=False, verbose_name=b'Copper/Copper alloy')),
                ('jet_lignite_shale', models.CharField(max_length=20, null=True, blank=True)),
                ('jet_lignite_shale_bool', models.NullBooleanField(default=False, verbose_name=b'Jet/Lignite/Shale')),
                ('grave_good_short_summary', models.TextField(max_length=1000, null=True, blank=True)),
                ('calibrated_date_bc_2_sigma', models.CharField(max_length=50, null=True, blank=True)),
                ('pot_type', models.CharField(max_length=1000, null=True, blank=True)),
                ('pot_type_summary', models.CharField(max_length=100, null=True, blank=True)),
                ('uncalibrated_date_bp', models.CharField(max_length=100, null=True, blank=True)),
                ('uncalibrated_date_bc', models.CharField(max_length=100, null=True, blank=True)),
                ('calibrated_date_bc_1_sigma', models.CharField(max_length=50, null=True, blank=True)),
                ('calibrated_date_bc_2_sigma_repeated_field', models.CharField(max_length=50, null=True, blank=True)),
                ('general_chronology', models.CharField(help_text=b'Redundant field - use the one below', max_length=50, null=True, blank=True)),
                ('biblio_for_site', models.CharField(help_text=b'Redundant - to be replaced/moved', max_length=1000, null=True, blank=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('location_approximate', models.NullBooleanField()),
                ('local_coordinates_string', models.CharField(max_length=50, null=True, blank=True)),
                ('local_coordinates_epsg_code', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ('site', 'date_ref'),
                'verbose_name_plural': 'Burial',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('country_name', models.CharField(max_length=100, null=True, blank=True)),
            ],
            options={
                'ordering': ('country_name', 'id'),
                'verbose_name_plural': 'Countries',
            },
        ),
        migrations.CreateModel(
            name='Dating',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('general_chronology', models.CharField(max_length=50, null=True, blank=True)),
                ('date_ref', models.CharField(max_length=20, null=True, blank=True)),
                ('summary', models.CharField(max_length=100, null=True, blank=True)),
                ('calibrated_date_bc_2_sigma', models.CharField(max_length=20, null=True, blank=True)),
                ('uncalibrated_date_bp', models.CharField(max_length=20, null=True, blank=True)),
                ('uncalibrated_date_bc', models.CharField(max_length=20, null=True, blank=True)),
                ('duplicate_field', models.CharField(max_length=50, null=True, blank=True)),
                ('approx_uncalibrated_date_bp', models.IntegerField(null=True, blank=True)),
                ('error_margin', models.IntegerField(null=True, blank=True)),
                ('burial', models.ForeignKey(to='aema_db.Burials')),
            ],
        ),
        migrations.CreateModel(
            name='Discovery',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='Etymology',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('comment', models.CharField(max_length=250, null=True, blank=True)),
                ('is_ogam', models.NullBooleanField()),
                ('reference', models.CharField(max_length=100, null=True, blank=True)),
                ('leptonic', models.CharField(max_length=100, null=True, verbose_name=b'Lepontic', blank=True)),
                ('pie_etymology', models.CharField(max_length=100, null=True, verbose_name=b'PIE etymology', blank=True)),
                ('ie_etymology', models.CharField(max_length=100, null=True, verbose_name=b'IE etymology', blank=True)),
                ('gaulish', models.CharField(max_length=1000, null=True, blank=True)),
                ('proto_celtic_etymology', models.CharField(max_length=1000, null=True, verbose_name=b'Proto-Celtic etymology', blank=True)),
                ('celtic_etymology', models.TextField(max_length=1000, null=True, verbose_name=b'Celtic etymology', blank=True)),
                ('celtic_cognates', models.CharField(max_length=1000, null=True, blank=True)),
                ('galatian', models.CharField(max_length=1000, null=True, blank=True)),
                ('syntax', models.CharField(max_length=1000, null=True, blank=True)),
                ('semantic', models.CharField(max_length=1000, null=True, blank=True)),
                ('other_hispano_celtic', models.CharField(max_length=1000, null=True, blank=True)),
                ('phonology', models.CharField(max_length=1000, null=True, blank=True)),
                ('irish', models.CharField(max_length=1000, null=True, blank=True)),
                ('welsh', models.CharField(max_length=1000, null=True, blank=True)),
                ('cornish', models.CharField(max_length=1000, null=True, blank=True)),
                ('breton', models.CharField(max_length=1000, null=True, blank=True)),
                ('cont_celtic', models.CharField(max_length=1000, null=True, blank=True)),
                ('cumbric', models.CharField(max_length=1000, null=True, blank=True)),
                ('brittonic', models.CharField(max_length=1000, null=True, blank=True)),
                ('insular_celtic', models.CharField(max_length=1000, null=True, blank=True)),
                ('pictish_celtic', models.CharField(max_length=1000, null=True, blank=True)),
                ('scottish_gaelic', models.CharField(max_length=1000, null=True, blank=True)),
                ('manx', models.CharField(max_length=1000, null=True, blank=True)),
                ('goidelic', models.CharField(max_length=1000, null=True, blank=True)),
                ('morphology', models.TextField(max_length=1000, null=True, blank=True)),
            ],
            options={
                'ordering': ('description',),
                'verbose_name_plural': 'Etymologies',
            },
        ),
        migrations.CreateModel(
            name='EtymologyDescription',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('simple_form', models.CharField(max_length=50, null=True, blank=True)),
                ('description', models.CharField(max_length=50, verbose_name=b'Form')),
                ('long_description', models.CharField(max_length=200, null=True, verbose_name=b'Extended form', blank=True)),
                ('en_cognate', models.CharField(max_length=200, null=True, verbose_name=b'English definition', blank=True)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='EtymologyType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('gender_name', models.CharField(max_length=30)),
            ],
            options={
                'ordering': ('gender_name',),
            },
        ),
        migrations.CreateModel(
            name='GeneralChronology',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='GraveGood',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('functional_type', models.CharField(blank=True, max_length=b'2', null=True, help_text=b'Use the new fk field below', choices=[(b'AX', b'Axehead'), (b'AH', b'Arrowhead'), (b'AW', b'Awl'), (b'AT', b'Amulet'), (b'AM', b'Armlet'), (b'AT', b'Animal bone burnt'), (b'AB', b'Animal bone unburnt'), (b'BG', b'Beltring or toggle'), (b'BT', b'Button'), (b'BD', b'Bead'), (b'BR', b'Bracelet'), (b'BC', b'Bracer'), (b'BL', b'Blade'), (b'CO', b'Core'), (b'CU', b'Cushion stone'), (b'CP', b'Cup non ceramic'), (b'CL', b'Cauldron'), (b'DG', b'Dagger'), (b'DC', b'Disc'), (b'DF', b'Dress fastener'), (b'DK', b'Dirk'), (b'EG', b'Earring basket ornamnent'), (b'FA', b'Fabricator'), (b'FL', b'Flake'), (b'FN', b'Flint nodule'), (b'FB', b'Fibula'), (b'FS', b'Fossil'), (b'FR', b'Fur'), (b'GG', b'Gorget'), (b'HM', b'Hammerstone'), (b'HB', b'Halberd'), (b'HN', b'Horn'), (b'KN', b'Knife'), (b'LU', b'Lunulae'), (b'LZ', b'Lozenge'), (b'MC', b'Macehead'), (b'NK', b'Necklace'), (b'OT', b'Other'), (b'PB', b'Polished bone'), (b'PQ', b'Quartz pebble'), (b'PE', b'Pebble'), (b'PI', b'Pin'), (b'PT', b'Pendant'), (b'PO', b'Point'), (b'RA', b'Rock art'), (b'RG', b'Ring'), (b'RU', b'Rubber'), (b'RZ', b'Razor'), (b'SC', b'Scraper'), (b'SP', b'Spoon'), (b'SW', b'Sword'), (b'SH', b'Shell'), (b'SM', b'Smoother'), (b'SL', b'Strike-a-light'), (b'SP', b'Spearhead'), (b'TX', b'Textile'), (b'QS', b'Quern - grinding stone'), (b'UK', b'Unknown'), (b'WH', b'Whetstone'), (b'WS', b'Worked slate')])),
                ('condition', models.BooleanField(default=False, verbose_name=b'Fragmentary?')),
                ('placement', models.CharField(blank=True, max_length=b'2', null=True, choices=[(b'NH', b'Near head'), (b'BB', b'Behind back'), (b'ND', b'Near hands'), (b'PE', b'Pelvis'), (b'NF', b'Near feet'), (b'NK', b'Neck'), (b'FF', b'In front of face'), (b'WC', b'With cremation')])),
                ('description', models.CharField(max_length=100, null=True, blank=True)),
                ('raw_notes', models.TextField(null=True, blank=True)),
                ('burial', models.ForeignKey(to='aema_db.Burials')),
            ],
            options={
                'ordering': ('functional_type_fk', 'id'),
            },
        ),
        migrations.CreateModel(
            name='GraveGoodClass',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description', 'id'),
            },
        ),
        migrations.CreateModel(
            name='GraveGoodFunctionalType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('short_desc', models.CharField(max_length=2, null=True, blank=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description', 'id'),
            },
        ),
        migrations.CreateModel(
            name='GraveGoodPlacement',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('short_desc', models.CharField(max_length=2, null=True, blank=True)),
                ('description', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='GraveGoodRawMaterialType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description', 'id'),
            },
        ),
        migrations.CreateModel(
            name='GraveGoodType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description', 'id'),
            },
        ),
        migrations.CreateModel(
            name='HoardContextSummary',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='HoardImage',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=200)),
                ('image', models.ImageField(upload_to=b'static/media/uploads/Hoards/')),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='HoardMaterial',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Hoards',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('site_name', models.CharField(max_length=1000, null=True, blank=True)),
                ('lat', models.FloatField(null=True, blank=True)),
                ('lon', models.FloatField(null=True, blank=True)),
                ('area', models.CharField(max_length=1000, null=True, blank=True)),
                ('region', models.CharField(max_length=1000, null=True, blank=True)),
                ('country', models.CharField(max_length=1000, null=True, blank=True)),
                ('easting', models.FloatField(null=True, blank=True)),
                ('northing', models.FloatField(null=True, blank=True)),
                ('deposit_overview', models.TextField(max_length=1000, null=True, blank=True)),
                ('deposit_context', models.TextField(max_length=1000, null=True, blank=True)),
                ('no_of_objects', models.CharField(max_length=1000, null=True, blank=True)),
                ('no_of_objects_cleaned', models.IntegerField(null=True, blank=True)),
                ('no_of_objects_clustered', models.CharField(max_length=1000, null=True, blank=True)),
                ('no_of_objects_clustered_choice', models.CharField(blank=True, max_length=2, null=True, choices=[(b'UK', b'Unknown'), (b'ON', b'1'), (b'TW', b'2'), (b'TH', b'3'), (b'FO', b'4'), (b'FV', b'5'), (b'SX', b'6'), (b'SV', b'7'), (b'EI', b'8'), (b'NI', b'9'), (b'TN', b'10'), (b'TP', b'10 plus'), (b'ET', b'11 to 20'), (b'TT', b'21 to 30'), (b'TF', b'31 to 40'), (b'FF', b'41 to 50'), (b'FH', b'51 to 100'), (b'HT', b'101 to 200'), (b'TA', b'201 to 300'), (b'TB', b'301 to 400'), (b'FA', b'401 to 500'), (b'FS', b'501 to 600'), (b'SS', b'601 to 700'), (b'SE', b'701 to 800'), (b'EN', b'801 to 900'), (b'NO', b'901 to 1000'), (b'OT', b'1000 plus'), (b'FT', b'1500 plus'), (b'TZ', b'3500 plus')])),
                ('find_type', models.CharField(max_length=1000, null=True, blank=True)),
                ('find_type_cleaned', models.CharField(blank=True, max_length=2, null=True, choices=[(b'HO', b'Hoard'), (b'PR', b'Pair'), (b'SF', b'Single find'), (b'TR', b'Triple'), (b'UK', b'Unknown')])),
                ('material_type', models.CharField(max_length=1000, null=True, blank=True)),
                ('summary_deposit_type', models.CharField(max_length=1000, null=True, blank=True)),
                ('general_type', models.CharField(max_length=1000, null=True, blank=True)),
                ('specific_object_description', models.TextField(max_length=1000, null=True, blank=True)),
                ('arrangement_of_objects', models.TextField(max_length=1000, null=True, blank=True)),
                ('object_condition', models.CharField(max_length=1000, null=True, blank=True)),
                ('object_condition_summary', models.CharField(max_length=1000, null=True, blank=True)),
                ('object_condition_summary_choice', models.CharField(blank=True, max_length=32, null=True, choices=[(b'BR', b'Broken'), (b'CP', b'Complete'), (b'MC', b'Mainly intact'), (b'MF', b'Mostly fragmented'), (b'MX', b'Mixed'), (b'UK', b'Unknown')])),
                ('dry_wet_context', models.CharField(max_length=1000, null=True, blank=True)),
                ('dry_wet_context_choice', models.CharField(blank=True, max_length=2, null=True, choices=[(b'DR', b'Dry'), (b'WT', b'Wet'), (b'TR', b'Transition'), (b'UD', b'Dry Uncertain'), (b'UW', b'Wet Uncertain'), (b'UT', b'Transition Uncertain'), (b'UK', b'Unknown')])),
                ('metal_analysis_summary_1', models.CharField(max_length=1000, null=True, blank=True)),
                ('context_summary', models.CharField(max_length=1000, null=True, blank=True)),
                ('chronology_date_bracket_BC', models.CharField(max_length=1000, null=True, blank=True)),
                ('chronology_start_date_BC', models.IntegerField(null=True, blank=True)),
                ('chronoloy_end_date_BC', models.IntegerField(null=True, blank=True)),
                ('regional_period_phase', models.CharField(max_length=1000, null=True, blank=True)),
                ('period_summary', models.CharField(max_length=1000, null=True, blank=True)),
                ('c14_dates', models.CharField(max_length=1000, null=True, blank=True)),
                ('refs', models.CharField(max_length=1000, null=True, blank=True)),
                ('notes', models.TextField(max_length=1000, null=True, blank=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('context_summary_m2m', models.ManyToManyField(to='aema_db.HoardContextSummary', blank=True)),
            ],
            options={
                'verbose_name': 'Metalwork',
                'verbose_name_plural': 'Metalwork',
            },
        ),
        migrations.CreateModel(
            name='HoardSpecificObject',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='HoardType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='HumanFigure',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='LocationSummary',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='MajorPotType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Miscellaneous',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('site_name', models.CharField(max_length=1000, null=True, blank=True)),
                ('lat', models.FloatField(null=True, blank=True)),
                ('lon', models.FloatField(null=True, blank=True)),
                ('area', models.CharField(max_length=1000, null=True, blank=True)),
                ('region', models.CharField(max_length=1000, null=True, blank=True)),
                ('country', models.CharField(max_length=1000, null=True, blank=True)),
                ('easting', models.FloatField(null=True, blank=True)),
                ('northing', models.FloatField(null=True, blank=True)),
                ('deposit_overview', models.TextField(max_length=1000, null=True, blank=True)),
                ('deposit_context', models.TextField(max_length=1000, null=True, blank=True)),
                ('no_of_objects', models.CharField(max_length=1000, null=True, blank=True)),
                ('no_of_objects_cleaned', models.IntegerField(null=True, blank=True)),
                ('no_of_objects_clustered', models.CharField(max_length=1000, null=True, blank=True)),
                ('no_of_objects_clustered_choice', models.CharField(blank=True, max_length=2, null=True, choices=[(b'UK', b'Unknown'), (b'ON', b'1'), (b'TW', b'2'), (b'TH', b'3'), (b'FO', b'4'), (b'FV', b'5'), (b'SX', b'6'), (b'SV', b'7'), (b'EI', b'8'), (b'NI', b'9'), (b'TN', b'10'), (b'TP', b'10 plus'), (b'ET', b'11 to 20'), (b'TT', b'21 to 30'), (b'TF', b'31 to 40'), (b'FF', b'41 to 50'), (b'FH', b'51 to 100'), (b'HT', b'101 to 200'), (b'TA', b'201 to 300'), (b'TB', b'301 to 400'), (b'FA', b'401 to 500'), (b'FS', b'501 to 600'), (b'SS', b'601 to 700'), (b'SE', b'701 to 800'), (b'EN', b'801 to 900'), (b'NO', b'901 to 1000'), (b'OT', b'1000 plus'), (b'FT', b'1500 plus'), (b'TZ', b'3500 plus')])),
                ('find_type', models.CharField(max_length=1000, null=True, blank=True)),
                ('find_type_cleaned', models.CharField(blank=True, max_length=2, null=True, choices=[(b'HO', b'Hoard'), (b'PR', b'Pair'), (b'SF', b'Single find'), (b'TR', b'Triple'), (b'UK', b'Unknown')])),
                ('material_type', models.CharField(max_length=1000, null=True, blank=True)),
                ('summary_deposit_type', models.CharField(max_length=1000, null=True, blank=True)),
                ('general_type', models.CharField(max_length=1000, null=True, blank=True)),
                ('specific_object_description', models.TextField(max_length=1000, null=True, blank=True)),
                ('arrangement_of_objects', models.TextField(max_length=1000, null=True, blank=True)),
                ('object_condition', models.CharField(max_length=1000, null=True, blank=True)),
                ('object_condition_summary', models.CharField(max_length=1000, null=True, blank=True)),
                ('object_condition_summary_choice', models.CharField(blank=True, max_length=32, null=True, choices=[(b'BR', b'Broken'), (b'CP', b'Complete'), (b'MC', b'Mainly intact'), (b'MF', b'Mostly fragmented'), (b'MX', b'Mixed'), (b'UK', b'Unknown')])),
                ('dry_wet_context', models.CharField(max_length=1000, null=True, blank=True)),
                ('dry_wet_context_choice', models.CharField(blank=True, max_length=2, null=True, choices=[(b'DR', b'Dry'), (b'WT', b'Wet'), (b'TR', b'Transition'), (b'UD', b'Dry Uncertain'), (b'UW', b'Wet Uncertain'), (b'UT', b'Transition Uncertain'), (b'UK', b'Unknown')])),
                ('material_analysis_summary', models.CharField(max_length=1000, null=True, blank=True)),
                ('context_summary', models.CharField(max_length=1000, null=True, blank=True)),
                ('chronology_date_bracket_BC', models.CharField(max_length=1000, null=True, blank=True)),
                ('chronology_start_date_BC', models.IntegerField(null=True, blank=True)),
                ('chronoloy_end_date_BC', models.IntegerField(null=True, blank=True)),
                ('regional_period_phase', models.CharField(max_length=1000, null=True, blank=True)),
                ('period_summary', models.CharField(max_length=1000, null=True, blank=True)),
                ('c14_dates', models.CharField(max_length=1000, null=True, blank=True)),
                ('refs', models.CharField(max_length=1000, null=True, blank=True)),
                ('notes', models.TextField(max_length=1000, null=True, blank=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('context_summary_m2m', models.ManyToManyField(to='aema_db.HoardContextSummary', blank=True)),
                ('general_type_m2m', models.ManyToManyField(to='aema_db.HoardType', blank=True)),
                ('material_type_fk', models.ManyToManyField(to='aema_db.HoardMaterial', blank=True)),
            ],
            options={
                'verbose_name': 'Miscellaneous',
                'verbose_name_plural': 'Miscellany',
            },
        ),
        migrations.CreateModel(
            name='MiscellaneousImage',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=100)),
                ('type', models.CharField(max_length=2, choices=[(b'GN', b'General'), (b'IN', b'Inscription'), (b'DW', b'Drawing')])),
                ('image', models.ImageField(upload_to=b'static/media/uploads/Misc/')),
                ('miscellaneous', models.ForeignKey(to='aema_db.Miscellaneous')),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='Motif',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='NameForm',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Name formula',
                'verbose_name_plural': 'Name formulae',
            },
        ),
        migrations.CreateModel(
            name='Ogam',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('site', models.CharField(max_length=100, null=True, blank=True)),
                ('ancient_name', models.CharField(max_length=100, null=True, blank=True)),
                ('province', models.CharField(max_length=100, null=True, blank=True)),
                ('rmp', models.CharField(max_length=100, null=True, verbose_name=b'Record of Monument and Place', blank=True)),
                ('coords', models.CharField(help_text=b'Irish Transverse Mercator, please use Map or WGS84 Lat/Lon from here on', max_length=200, null=True, blank=True)),
                ('lon', models.FloatField(null=True, blank=True)),
                ('lat', models.FloatField(null=True, blank=True)),
                ('text', models.CharField(max_length=100, null=True, blank=True)),
                ('expansion', models.CharField(max_length=100, null=True, blank=True)),
                ('number', models.CharField(max_length=100, null=True, blank=True)),
                ('type', models.CharField(max_length=100, null=True, blank=True)),
                ('context', models.TextField(max_length=1000, null=True, blank=True)),
                ('date', models.CharField(max_length=100, null=True, blank=True)),
                ('script', models.CharField(max_length=100, null=True, blank=True)),
                ('language', models.CharField(max_length=100, null=True, blank=True)),
                ('contains_pn', models.CharField(max_length=100, null=True, blank=True)),
                ('contains_pn_bool', models.NullBooleanField(verbose_name=b'Contains personal names?')),
                ('comment', models.CharField(max_length=100, null=True, blank=True)),
                ('nf', models.CharField(max_length=100, null=True, verbose_name=b'Name formulae', blank=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('language_fk', models.ForeignKey(blank=True, to='aema_db.Language', null=True)),
                ('name_forms_present', models.ManyToManyField(to='aema_db.NameForm', verbose_name=b'Name formulae M2M')),
            ],
            options={
                'ordering': ('site',),
                'verbose_name_plural': 'Ogam',
            },
        ),
        migrations.CreateModel(
            name='OgamFernandoRaw',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('word', models.CharField(max_length=500, null=True, blank=True)),
                ('nr', models.CharField(max_length=500, null=True, blank=True)),
                ('source', models.CharField(max_length=500, null=True, blank=True)),
                ('context', models.TextField(null=True, blank=True)),
                ('leptonic', models.TextField(max_length=500, null=True, blank=True)),
                ('pie_etymology', models.CharField(max_length=500, null=True, blank=True)),
                ('ie_etymology', models.CharField(max_length=500, null=True, blank=True)),
                ('gaulish', models.CharField(max_length=500, null=True, blank=True)),
                ('proto_celtic_etymology', models.CharField(max_length=500, null=True, blank=True)),
                ('celtic_etymology', models.CharField(max_length=1000, null=True, blank=True)),
                ('celtic_cognates', models.CharField(max_length=500, null=True, blank=True)),
                ('galatian', models.CharField(max_length=500, null=True, blank=True)),
                ('morphology', models.CharField(max_length=500, null=True, blank=True)),
                ('syntax', models.CharField(max_length=500, null=True, blank=True)),
                ('semantic', models.CharField(max_length=500, null=True, blank=True)),
                ('other_hispano_celtic', models.CharField(max_length=500, null=True, blank=True)),
                ('other_hispano_celtic_2', models.CharField(max_length=500, null=True, blank=True)),
                ('phonology', models.CharField(max_length=500, null=True, blank=True)),
                ('script', models.CharField(max_length=500, null=True, blank=True)),
                ('irish', models.CharField(max_length=500, null=True, blank=True)),
                ('welsh', models.CharField(max_length=500, null=True, blank=True)),
                ('cornish', models.CharField(max_length=500, null=True, blank=True)),
                ('breton', models.CharField(max_length=500, null=True, blank=True)),
                ('cont_celtic', models.CharField(max_length=500, null=True, blank=True)),
                ('cont_celtic_2', models.CharField(max_length=500, null=True, blank=True)),
                ('cumbric', models.CharField(max_length=500, null=True, blank=True)),
                ('brittonic', models.CharField(max_length=500, null=True, blank=True)),
                ('insular_celtic', models.CharField(max_length=500, null=True, blank=True)),
                ('pictish_celtic', models.CharField(max_length=500, null=True, blank=True)),
                ('pictish_celtic_2', models.CharField(max_length=500, null=True, blank=True)),
                ('scottish_gaelic', models.CharField(max_length=500, null=True, blank=True)),
                ('scottish_gaelic_2', models.CharField(max_length=500, null=True, blank=True)),
                ('manx', models.CharField(max_length=500, null=True, blank=True)),
                ('goidelic', models.CharField(max_length=500, null=True, blank=True)),
                ('findspot', models.CharField(max_length=500, null=True, blank=True)),
                ('mod_province', models.CharField(max_length=500, null=True, blank=True)),
                ('materials', models.CharField(max_length=500, null=True, blank=True)),
                ('type', models.CharField(max_length=500, null=True, blank=True)),
                ('dates', models.CharField(max_length=500, null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='OgamImage',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=100)),
                ('type', models.CharField(max_length=2, choices=[(b'GN', b'General'), (b'IN', b'Inscription'), (b'DW', b'Drawing')])),
                ('image', models.ImageField(upload_to=b'static/media/uploads/Ogam/')),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='OgamInscription',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.TextField(null=True, blank=True)),
                ('name_clean', models.CharField(max_length=500, null=True, blank=True)),
                ('expanded_text', models.CharField(max_length=100, null=True, blank=True)),
                ('is_ogam', models.NullBooleanField()),
                ('reference', models.CharField(max_length=250, null=True, blank=True)),
                ('language', models.CharField(help_text=b'Legacy field to be moved to drop down list', max_length=50, null=True, blank=True)),
                ('etymology', models.CharField(help_text=b'Legacy field to be moved to drop down list', max_length=50, null=True, blank=True)),
                ('etymology_fk', models.CharField(blank=True, max_length=2, null=True, choices=[(b'IE', b'Indo European'), (b'PC', b'Proto Celtic'), (b'CM', b'Comparanda')])),
                ('comment', models.TextField(null=True, blank=True)),
                ('grammatical_description', models.CharField(max_length=100, null=True, blank=True)),
                ('chronology', models.CharField(help_text=b'Should this be a drop down list also? NJ', max_length=100, null=True, blank=True)),
                ('reason', models.CharField(help_text=b'Should this be a drop down list also? NJ', max_length=100, null=True, blank=True)),
                ('materials', models.CharField(max_length=500, null=True, blank=True)),
                ('site_type', models.CharField(max_length=500, null=True, blank=True)),
                ('source', models.CharField(max_length=500, null=True, blank=True)),
                ('context', models.TextField(null=True, blank=True)),
                ('leptonic', models.TextField(max_length=1000, null=True, verbose_name=b'Lepontic', blank=True)),
                ('pie_etymology', models.TextField(max_length=1000, null=True, verbose_name=b'PIE etymology', blank=True)),
                ('ie_etymology', models.TextField(max_length=1000, null=True, verbose_name=b'IE etymology', blank=True)),
                ('gaulish', models.TextField(max_length=1000, null=True, blank=True)),
                ('proto_celtic_etymology', models.TextField(max_length=1000, null=True, verbose_name=b'Proto-Celtic etymology', blank=True)),
                ('celtic_etymology', models.TextField(max_length=1000, null=True, verbose_name=b'Celtic etymology', blank=True)),
                ('celtic_cognates', models.TextField(max_length=1000, null=True, blank=True)),
                ('galatian', models.TextField(max_length=1000, null=True, blank=True)),
                ('morphology', models.TextField(max_length=1000, null=True, blank=True)),
                ('syntax', models.TextField(max_length=1000, null=True, blank=True)),
                ('semantic', models.TextField(max_length=1000, null=True, blank=True)),
                ('other_hispano_celtic', models.TextField(max_length=1000, null=True, blank=True)),
                ('other_hispano_celtic_2', models.TextField(max_length=1000, null=True, blank=True)),
                ('phonology', models.TextField(max_length=1000, null=True, blank=True)),
                ('script', models.TextField(max_length=1000, null=True, blank=True)),
                ('irish', models.TextField(max_length=1000, null=True, blank=True)),
                ('welsh', models.TextField(max_length=1000, null=True, blank=True)),
                ('cornish', models.TextField(max_length=1000, null=True, blank=True)),
                ('breton', models.TextField(max_length=1000, null=True, blank=True)),
                ('cont_celtic', models.TextField(max_length=1000, null=True, blank=True)),
                ('cont_celtic_2', models.TextField(max_length=1000, null=True, blank=True)),
                ('cumbric', models.TextField(max_length=1000, null=True, blank=True)),
                ('brittonic', models.TextField(max_length=1000, null=True, blank=True)),
                ('insular_celtic', models.TextField(max_length=1000, null=True, blank=True)),
                ('pictish_celtic', models.TextField(max_length=1000, null=True, blank=True)),
                ('pictish_celtic_2', models.TextField(max_length=1000, null=True, blank=True)),
                ('scottish_gaelic', models.TextField(max_length=1000, null=True, blank=True)),
                ('scottish_gaelic_2', models.TextField(max_length=1000, null=True, blank=True)),
                ('manx', models.TextField(max_length=1000, null=True, blank=True)),
                ('goidelic', models.TextField(max_length=1000, null=True, blank=True)),
                ('findspot', models.CharField(max_length=500, null=True, blank=True)),
                ('mod_province', models.CharField(max_length=500, null=True, blank=True)),
                ('dates', models.CharField(max_length=500, null=True, blank=True)),
                ('matchstring', models.CharField(max_length=200, null=True, blank=True)),
                ('language_fk', models.ForeignKey(verbose_name=b'Language of name', blank=True, to='aema_db.Language', null=True)),
                ('language_of_inscription', models.ForeignKey(related_name='inscription_language', blank=True, to='aema_db.Language', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OgamSite',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('site', models.CharField(max_length=100, null=True, blank=True)),
                ('ancient_name', models.CharField(max_length=100, null=True, blank=True)),
                ('province', models.CharField(max_length=100, null=True, blank=True)),
                ('rmp', models.CharField(max_length=100, null=True, verbose_name=b'Record of Monument and Place', blank=True)),
                ('coords', models.CharField(help_text=b'Irish Transverse Mercator,         please use Map or WGS84 Lat/Lon from here on', max_length=200, null=True, blank=True)),
                ('lon', models.FloatField(null=True, blank=True)),
                ('lat', models.FloatField(null=True, blank=True)),
                ('full_text', models.CharField(max_length=100, null=True, blank=True)),
                ('expanded_text', models.CharField(max_length=100, null=True, blank=True)),
                ('expanded_text_cleaned', models.CharField(max_length=100, null=True, blank=True)),
                ('number', models.CharField(max_length=100, null=True, blank=True)),
                ('type', models.CharField(max_length=100, null=True, blank=True)),
                ('context_description', models.TextField(max_length=1000, null=True, blank=True)),
                ('context_micro', models.CharField(blank=True, max_length=2, null=True, choices=[(b'BU', b'Burial'), (b'CA', b'Cairn'), (b'CV', b'Cave'), (b'EC', b'Ecclesiastical'), (b'LN', b'Landscape'), (b'ST', b'Settlement'), (b'SH', b'Settlement hillfort'), (b'SB', b'Settlement broch'), (b'SR', b'Settlement Roman'), (b'SS', b'Standing stone'), (b'SP', b'Standing stone possible'), (b'UK', b'Unknown')])),
                ('context_micro_free_text', models.CharField(help_text=b'To be moved into drop down list', max_length=50, null=True, blank=True)),
                ('context_secondary', models.NullBooleanField()),
                ('context_secondary_text', models.CharField(help_text=b'To be moved into tick box', max_length=10, null=True, blank=True)),
                ('context_macro', models.CharField(blank=True, max_length=2, null=True, choices=[(b'CS', b'Coastal'), (b'IS', b'Island'), (b'LW', b'Lowland'), (b'RV', b'Riverine'), (b'UL', b'Upland'), (b'UK', b'Unknown')])),
                ('context_macro_free_text', models.CharField(help_text=b'to be moved into drop down list', max_length=50, null=True, blank=True)),
                ('etymology', models.TextField(help_text=b'Temporary field to hold imported data. Contents should probably migrate to Fernandos data below', null=True, blank=True)),
                ('meaning', models.TextField(help_text=b'Temporary field to hold imported data. Contents should probably migrate to Fernandos data below', null=True, blank=True)),
                ('date', models.CharField(max_length=100, null=True, blank=True)),
                ('script', models.CharField(max_length=100, null=True, blank=True)),
                ('language', models.CharField(max_length=100, null=True, blank=True)),
                ('contains_pn', models.CharField(max_length=100, null=True, blank=True)),
                ('contains_pn_bool', models.NullBooleanField(verbose_name=b'Contains personal names?')),
                ('comment', models.CharField(max_length=100, null=True, blank=True)),
                ('nf', models.CharField(max_length=100, null=True, verbose_name=b'Name formulae', blank=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('language_fk', models.ForeignKey(blank=True, to='aema_db.Language', null=True)),
                ('name_forms_present', models.ManyToManyField(to='aema_db.NameForm', verbose_name=b'Name formulae M2M')),
            ],
            options={
                'ordering': ('site',),
                'verbose_name_plural': 'Ogam site',
            },
        ),
        migrations.CreateModel(
            name='OrganicMaterial',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('material_class', models.CharField(help_text=b'No need to fill this in - it will populate automatically', max_length=100, null=True, blank=True)),
            ],
            options={
                'ordering': ('material_class',),
            },
        ),
        migrations.CreateModel(
            name='OrganicMaterialMaster',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('master', models.CharField(max_length=30)),
            ],
            options={
                'ordering': ('master',),
            },
        ),
        migrations.CreateModel(
            name='OrganicMaterialSubClass',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('material_sub_class', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('material_sub_class',),
            },
        ),
        migrations.CreateModel(
            name='PeriodSummary',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Pot',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=100)),
                ('count', models.IntegerField(help_text=b'Redundant - to be replaced/moved', null=True, blank=True)),
                ('pot_placement', models.CharField(blank=True, max_length=b'2', null=True, choices=[(b'NH', b'Near head'), (b'BB', b'Behind back'), (b'ND', b'Near hands'), (b'PE', b'Pelvis'), (b'NF', b'Near feet'), (b'NK', b'Neck'), (b'FF', b'In front of face'), (b'WC', b'With cremation'), (b'CN', b'Container')])),
                ('pot_disposition', models.CharField(blank=True, max_length=b'2', null=True, verbose_name=b'Pot position', choices=[(b'UP', b'Upright'), (b'IN', b'Inverted'), (b'SO', b'On side')])),
                ('condition', models.CharField(default=b'CP', max_length=2, choices=[(b'CP', b'Complete'), (b'FR', b'Fragmentary'), (b'SH', b'Small number of sherds'), (b'UK', b'Unknown')])),
                ('specific_type', models.CharField(blank=True, max_length=b'2', null=True, verbose_name=b'Type', choices=[(b'UK', b'Unknown'), (b'BB', b'Bell beaker'), (b'BL', b'Beaker local or derived'), (b'BU', b'Bucket urn'), (b'CU', b'Collared urn'), (b'CO', b'Cordoned urn'), (b'EN', b'Encrusted urn'), (b'FV', b'Food vessel'), (b'GU', b'Globular urn'), (b'GW', b'Grooved ware'), (b'LN', b'Late Neolithic'), (b'EB', b'Early Bronze age'), (b'MB', b'Middle Bronze age'), (b'MV', b'Miniature vessel'), (b'LB', b'Late Bronze age'), (b'LI', b'Late Bronze Iron age'), (b'VU', b'Vase urn')])),
                ('raw_notes', models.TextField(null=True, blank=True)),
                ('burial', models.ForeignKey(related_name='Burial', to='aema_db.Burials')),
                ('pot_placement_fk', models.ForeignKey(blank=True, to='aema_db.GraveGoodPlacement', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PotType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
                ('short_code', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('region_name', models.CharField(max_length=100, null=True, blank=True)),
                ('country', models.CharField(max_length=100, null=True, blank=True)),
                ('country_fk', models.ForeignKey(blank=True, to='aema_db.Country', null=True)),
            ],
            options={
                'ordering': ('region_name', 'id'),
            },
        ),
        migrations.CreateModel(
            name='RockFamily',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='RockType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
                ('family', models.ForeignKey(to='aema_db.RockFamily')),
            ],
        ),
        migrations.CreateModel(
            name='Script',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='ScriptSubType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='SettlementType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('site_name', models.CharField(max_length=100)),
                ('ancient_name', models.CharField(max_length=100, null=True, blank=True)),
                ('area', models.CharField(max_length=100, null=True, blank=True)),
                ('region', models.CharField(max_length=100, null=True, blank=True)),
                ('country', models.CharField(max_length=100, null=True, blank=True)),
                ('area_fk', models.ForeignKey(blank=True, to='aema_db.Area', null=True)),
            ],
            options={
                'ordering': ('site_name', 'id'),
                'verbose_name_plural': 'Sites',
            },
        ),
        migrations.CreateModel(
            name='SiteType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('site_type', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ('site_type', 'id'),
            },
        ),
        migrations.CreateModel(
            name='SiteTypeSpecific',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ('description', 'id'),
            },
        ),
        migrations.CreateModel(
            name='SpecificPotType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
                ('short_code', models.CharField(max_length=10)),
                ('major_type', models.ForeignKey(blank=True, to='aema_db.MajorPotType', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SpecificRockType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
                ('type', models.ForeignKey(to='aema_db.RockType')),
            ],
        ),
        migrations.CreateModel(
            name='Stelae',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('stelae_number', models.IntegerField(null=True, blank=True)),
                ('site_name', models.CharField(max_length=50, null=True, blank=True)),
                ('area', models.CharField(max_length=100, null=True, blank=True)),
                ('region', models.CharField(max_length=50, null=True, blank=True)),
                ('location_description', models.TextField(max_length=50, null=True, blank=True)),
                ('coordinates', models.CharField(max_length=50, null=True, blank=True)),
                ('summary_location', models.TextField(null=True, blank=True)),
                ('lon', models.FloatField(null=True, blank=True)),
                ('lat', models.FloatField(null=True, blank=True)),
                ('dimensions_height_m', models.FloatField(null=True, blank=True)),
                ('dimensions_width_m', models.FloatField(null=True, blank=True)),
                ('dimensions_thickness_m', models.FloatField(null=True, blank=True)),
                ('stone_shape', models.CharField(max_length=100, null=True, blank=True)),
                ('condition', models.TextField(null=True, blank=True)),
                ('technique_of_creation', models.CharField(max_length=200, null=True, blank=True)),
                ('stone_type_and_description', models.TextField(null=True, blank=True)),
                ('general_description', models.TextField(null=True, blank=True)),
                ('motif_overview', models.TextField(null=True, blank=True)),
                ('no_of_motifs', models.CharField(max_length=50, null=True, blank=True)),
                ('human_figure', models.CharField(max_length=10, null=True, blank=True)),
                ('human_figure_bool', models.NullBooleanField()),
                ('summary_of_human_figure', models.TextField(max_length=50, null=True, blank=True)),
                ('no_of_humans', models.IntegerField(null=True, blank=True)),
                ('disposition_of_human_in_relation_to_other_motifs', models.TextField(max_length=50, null=True, blank=True)),
                ('lance_spear', models.CharField(max_length=100, null=True, blank=True)),
                ('lance_spear_bool', models.NullBooleanField()),
                ('spearhead_location', models.CharField(max_length=200, null=True, blank=True)),
                ('sword', models.CharField(max_length=200, null=True, blank=True)),
                ('sword_bool', models.NullBooleanField()),
                ('sword_summary', models.CharField(max_length=50, null=True, blank=True)),
                ('sword_location', models.TextField(null=True, blank=True)),
                ('shield_summary', models.CharField(max_length=50, null=True, blank=True)),
                ('shield', models.TextField(null=True, blank=True)),
                ('shield_bool', models.NullBooleanField()),
                ('shield_location', models.CharField(max_length=200, null=True, blank=True)),
                ('bow_and_arrow_bool', models.CharField(max_length=10, null=True, blank=True)),
                ('bow_and_arrow', models.NullBooleanField()),
                ('bow_and_arrow_description', models.CharField(max_length=200, null=True, blank=True)),
                ('wheeled_vehicle', models.CharField(max_length=10, null=True, blank=True)),
                ('wheeled_vehicle_bool', models.NullBooleanField()),
                ('quadropeds_animals_bool', models.CharField(max_length=10, null=True, blank=True)),
                ('quadroped_bool', models.NullBooleanField()),
                ('quadroped_summary', models.CharField(max_length=200, null=True, blank=True)),
                ('vehicle_composition', models.TextField(null=True, blank=True)),
                ('ornaments_accessories', models.TextField(null=True, blank=True)),
                ('mirror', models.CharField(max_length=10, null=True, blank=True)),
                ('mirror_bool', models.NullBooleanField()),
                ('fibula', models.CharField(max_length=10, null=True, blank=True)),
                ('fibula_bool', models.NullBooleanField()),
                ('comb', models.CharField(max_length=10, null=True, blank=True)),
                ('comb_bool', models.NullBooleanField()),
                ('ornaments', models.CharField(max_length=10, null=True, blank=True)),
                ('ornaments_bool', models.NullBooleanField()),
                ('headdress', models.CharField(max_length=10, null=True, blank=True)),
                ('headdress_bool', models.NullBooleanField()),
                ('helmet', models.CharField(max_length=10, null=True, blank=True)),
                ('helmet_bool', models.NullBooleanField()),
                ('helmet_type', models.CharField(max_length=100, null=True, blank=True)),
                ('musical_instrument', models.CharField(max_length=50, null=True, blank=True)),
                ('musical_instrument_bool', models.NullBooleanField()),
                ('musical_instrument_description', models.TextField(max_length=200, null=True, blank=True)),
                ('circles_cup_and_rings', models.CharField(max_length=10, null=True, blank=True)),
                ('circles_cup_and_rings_bool', models.NullBooleanField()),
                ('circle_etc_description', models.TextField(null=True, blank=True)),
                ('other_motifs', models.TextField(max_length=50, null=True, blank=True)),
                ('unusual_motifs', models.TextField(max_length=50, null=True, blank=True)),
                ('re_use', models.CharField(max_length=100, null=True, blank=True)),
                ('re_use_bool', models.NullBooleanField()),
                ('additional_features', models.CharField(max_length=100, null=True, blank=True)),
                ('additional_features_bool', models.NullBooleanField()),
                ('re_use_additional_features', models.TextField(null=True, blank=True)),
                ('other_points_of_note', models.TextField(null=True, blank=True)),
                ('association_with_other_stelae_and_archaeology', models.TextField(null=True, blank=True)),
                ('notes', models.TextField(null=True, blank=True)),
                ('chronology', models.CharField(max_length=100, null=True, blank=True)),
                ('finding', models.TextField(null=True, blank=True)),
                ('bibliography', models.TextField(null=True, blank=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('discovery_raw', models.CharField(max_length=100, null=True, blank=True)),
                ('location_summary_raw', models.CharField(max_length=100, null=True, blank=True)),
                ('stelae_type_raw', models.CharField(max_length=100, null=True, blank=True)),
                ('type_of_land_raw', models.CharField(max_length=100, null=True, blank=True)),
                ('human_figure_m2m_raw', models.CharField(max_length=1000, null=True, blank=True)),
                ('chronology_start_bc', models.IntegerField(null=True, blank=True)),
                ('chronology_end_bc', models.IntegerField(null=True, blank=True)),
                ('chronology_fk', models.ForeignKey(blank=True, to='aema_db.PeriodSummary', null=True)),
                ('discovery', models.ForeignKey(blank=True, to='aema_db.Discovery', null=True)),
                ('human_figure_m2m', models.ManyToManyField(to='aema_db.HumanFigure', blank=True)),
                ('location_summary', models.ManyToManyField(to='aema_db.LocationSummary', blank=True)),
                ('motif', models.ManyToManyField(to='aema_db.Motif', blank=True)),
                ('site_fk', models.ForeignKey(blank=True, to='aema_db.Site', null=True)),
                ('specific_stone_type', models.ForeignKey(blank=True, to='aema_db.SpecificRockType', null=True)),
            ],
            options={
                'ordering': ('site_name', 'id'),
                'verbose_name_plural': 'Stelae',
            },
        ),
        migrations.CreateModel(
            name='StelaeImage',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=200)),
                ('image', models.ImageField(upload_to=b'static/media/uploads/Stelae/')),
                ('burial_fk', models.ForeignKey(to='aema_db.Stelae')),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='StelaeImageType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='StelaeStoneShape',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='StelaeTechnique',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='StelaeType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='StoredQuery',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('geojson_rep', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Toponyms',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=30, db_column=b'toponym', blank=True)),
                ('source', models.CharField(max_length=30, db_column=b'source', blank=True)),
                ('language', models.CharField(max_length=10, db_column=b'language', blank=True)),
                ('briga', models.CharField(max_length=1, db_column=b'briga', blank=True)),
                ('dunon', models.CharField(max_length=1, db_column=b'dunon', blank=True)),
                ('duron', models.CharField(max_length=1, db_column=b'duron', blank=True)),
                ('ebur', models.CharField(max_length=1, db_column=b'ebur', blank=True)),
                ('magos', models.CharField(max_length=1, db_column=b'magos', blank=True)),
                ('nemeton', models.CharField(max_length=1, db_column=b'nemeton', blank=True)),
                ('sego_field', models.CharField(max_length=1, db_column=b'sego', blank=True)),
                ('notes', models.CharField(max_length=30, db_column=b'notes', blank=True)),
                ('variants', models.CharField(max_length=60, db_column=b'variants', blank=True)),
                ('object', models.CharField(max_length=10, db_column=b'obj', blank=True)),
                ('text', models.CharField(max_length=20, db_column=b'toponym_text', blank=True)),
                ('notes_2_m', models.CharField(max_length=50, db_column=b'notes_2', blank=True)),
                ('novios', models.CharField(max_length=1, db_column=b'novios', blank=True)),
                ('cognate', models.CharField(max_length=50, null=True, blank=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, db_column=b'the_geom', blank=True)),
                ('etymological_desc', models.ForeignKey(blank=True, to='aema_db.EtymologyDescription', null=True)),
                ('language_fk', models.ForeignKey(blank=True, to='aema_db.Language', null=True)),
                ('object_fk', models.ForeignKey(blank=True, to='aema_db.SettlementType', null=True)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'aema_db_toponyms',
            },
        ),
        migrations.CreateModel(
            name='TypeOfLand',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.AddField(
            model_name='stelaeimage',
            name='type',
            field=models.ForeignKey(blank=True, to='aema_db.StelaeImageType', null=True),
        ),
        migrations.AddField(
            model_name='stelae',
            name='stelae_type',
            field=models.ManyToManyField(to='aema_db.StelaeType', blank=True),
        ),
        migrations.AddField(
            model_name='stelae',
            name='stone_shape_m2m',
            field=models.ManyToManyField(to='aema_db.StelaeStoneShape', blank=True),
        ),
        migrations.AddField(
            model_name='stelae',
            name='technique_m2m',
            field=models.ManyToManyField(to='aema_db.StelaeTechnique', blank=True),
        ),
        migrations.AddField(
            model_name='stelae',
            name='type_of_land',
            field=models.ManyToManyField(to='aema_db.TypeOfLand', blank=True),
        ),
        migrations.AddField(
            model_name='script',
            name='sub_type',
            field=models.ForeignKey(blank=True, to='aema_db.ScriptSubType', null=True),
        ),
        migrations.AddField(
            model_name='pot',
            name='pot_type_fk',
            field=models.ForeignKey(blank=True, to='aema_db.SpecificPotType', null=True),
        ),
        migrations.AddField(
            model_name='pot',
            name='type',
            field=models.ForeignKey(blank=True, to='aema_db.PotType', help_text=b'Possibly redundant field to be removed        after data migrated to new field', null=True),
        ),
        migrations.AddField(
            model_name='organicmaterial',
            name='master',
            field=models.ForeignKey(default=3, to='aema_db.OrganicMaterialMaster'),
        ),
        migrations.AddField(
            model_name='organicmaterial',
            name='sub_class',
            field=models.ForeignKey(blank=True, to='aema_db.OrganicMaterialSubClass', null=True),
        ),
        migrations.AddField(
            model_name='ogamsite',
            name='script_fk',
            field=models.ForeignKey(blank=True, to='aema_db.Script', null=True),
        ),
        migrations.AddField(
            model_name='ogamsite',
            name='site_fk',
            field=models.ForeignKey(blank=True, to='aema_db.Site', null=True),
        ),
        migrations.AddField(
            model_name='ogaminscription',
            name='ogamsite_fk',
            field=models.ForeignKey(blank=True, to='aema_db.OgamSite', null=True),
        ),
        migrations.AddField(
            model_name='ogaminscription',
            name='script_fk',
            field=models.ForeignKey(blank=True, to='aema_db.Script', null=True),
        ),
        migrations.AddField(
            model_name='ogaminscription',
            name='toponym',
            field=models.ForeignKey(blank=True, to='aema_db.Toponyms', null=True),
        ),
        migrations.AddField(
            model_name='ogamimage',
            name='ogam_fk',
            field=models.ForeignKey(to='aema_db.OgamInscription'),
        ),
        migrations.AddField(
            model_name='ogam',
            name='script_fk',
            field=models.ForeignKey(blank=True, to='aema_db.Script', null=True),
        ),
        migrations.AddField(
            model_name='ogam',
            name='site_fk',
            field=models.ForeignKey(blank=True, to='aema_db.Site', null=True),
        ),
        migrations.AddField(
            model_name='miscellaneous',
            name='period_summary_fk',
            field=models.ForeignKey(blank=True, to='aema_db.PeriodSummary', null=True),
        ),
        migrations.AddField(
            model_name='miscellaneous',
            name='site_fk',
            field=models.ForeignKey(blank=True, to='aema_db.Site', null=True),
        ),
        migrations.AddField(
            model_name='miscellaneous',
            name='specific_object_type_m2m',
            field=models.ManyToManyField(to='aema_db.HoardSpecificObject', blank=True),
        ),
        migrations.AddField(
            model_name='hoards',
            name='general_type_m2m',
            field=models.ManyToManyField(to='aema_db.HoardType', blank=True),
        ),
        migrations.AddField(
            model_name='hoards',
            name='material_type_fk',
            field=models.ManyToManyField(to='aema_db.HoardMaterial', blank=True),
        ),
        migrations.AddField(
            model_name='hoards',
            name='period_summary_fk',
            field=models.ForeignKey(blank=True, to='aema_db.PeriodSummary', null=True),
        ),
        migrations.AddField(
            model_name='hoards',
            name='site_fk',
            field=models.ForeignKey(blank=True, to='aema_db.Site', null=True),
        ),
        migrations.AddField(
            model_name='hoards',
            name='specific_object_type_m2m',
            field=models.ManyToManyField(to='aema_db.HoardSpecificObject', blank=True),
        ),
        migrations.AddField(
            model_name='hoardimage',
            name='hoard_fk',
            field=models.ForeignKey(to='aema_db.Hoards'),
        ),
        migrations.AddField(
            model_name='gravegood',
            name='functional_type_fk',
            field=models.ForeignKey(default=1, to='aema_db.GraveGoodFunctionalType'),
        ),
        migrations.AddField(
            model_name='gravegood',
            name='placement_fk',
            field=models.ForeignKey(blank=True, to='aema_db.GraveGoodPlacement', null=True),
        ),
        migrations.AddField(
            model_name='gravegood',
            name='raw_materials_m2m',
            field=models.ManyToManyField(to='aema_db.GraveGoodRawMaterialType', verbose_name=b'Raw materials', blank=True),
        ),
        migrations.AddField(
            model_name='gravegood',
            name='type',
            field=models.ForeignKey(blank=True, to='aema_db.GraveGoodType', help_text=b'Possibly redundant field to be removed after updates', null=True),
        ),
        migrations.AddField(
            model_name='etymology',
            name='description',
            field=models.ForeignKey(blank=True, to='aema_db.EtymologyDescription', null=True),
        ),
        migrations.AddField(
            model_name='etymology',
            name='inscription',
            field=models.ForeignKey(related_name='inscription', to='aema_db.OgamInscription'),
        ),
        migrations.AddField(
            model_name='etymology',
            name='language',
            field=models.ForeignKey(blank=True, to='aema_db.Language', null=True),
        ),
        migrations.AddField(
            model_name='etymology',
            name='type',
            field=models.ForeignKey(blank=True, to='aema_db.EtymologyType', null=True),
        ),
        migrations.AddField(
            model_name='dating',
            name='organic_material',
            field=models.ForeignKey(blank=True, to='aema_db.OrganicMaterial', null=True),
        ),
        migrations.AddField(
            model_name='burials',
            name='gender_m2m',
            field=models.ManyToManyField(to='aema_db.Gender', verbose_name=b'Gender assemblage'),
        ),
        migrations.AddField(
            model_name='burials',
            name='general_chronology_fk',
            field=models.ForeignKey(verbose_name=b'General chronology', blank=True, to='aema_db.GeneralChronology', null=True),
        ),
        migrations.AddField(
            model_name='burials',
            name='grave_good_class_m2m',
            field=models.ManyToManyField(to='aema_db.GraveGoodClass', verbose_name=b'Grave good classes'),
        ),
        migrations.AddField(
            model_name='burials',
            name='organic_material_fk',
            field=models.ForeignKey(verbose_name=b'Organic Material', blank=True, to='aema_db.OrganicMaterial', null=True),
        ),
        migrations.AddField(
            model_name='burials',
            name='site_fk',
            field=models.ForeignKey(blank=True, to='aema_db.Site', help_text=b'Currently displaying ID as there needs to be some checking and rationalisation of site name records (according to the original values below)', null=True, verbose_name=b'Location summary'),
        ),
        migrations.AddField(
            model_name='burials',
            name='site_type_m2m',
            field=models.ManyToManyField(to='aema_db.SiteType', verbose_name=b'Site type(s)'),
        ),
        migrations.AddField(
            model_name='burials',
            name='site_type_specific',
            field=models.ManyToManyField(to='aema_db.SiteTypeSpecific', verbose_name=b'Specific site type(s)'),
        ),
        migrations.AddField(
            model_name='burialindividuals',
            name='burial',
            field=models.ForeignKey(to='aema_db.Burials'),
        ),
        migrations.AddField(
            model_name='burialindividuals',
            name='general_chronology_fk',
            field=models.ForeignKey(blank=True, to='aema_db.GeneralChronology', null=True),
        ),
        migrations.AddField(
            model_name='burialindividuals',
            name='grave_good_m2m',
            field=models.ManyToManyField(to='aema_db.GraveGood', blank=True),
        ),
        migrations.AddField(
            model_name='burialindividuals',
            name='organic_material_fk',
            field=models.ForeignKey(verbose_name=b'Organic Material', blank=True, to='aema_db.OrganicMaterial', null=True),
        ),
        migrations.AddField(
            model_name='burialindividuals',
            name='position_fk',
            field=models.ForeignKey(blank=True, to='aema_db.BurialPosition', null=True),
        ),
        migrations.AddField(
            model_name='burialindividuals',
            name='pot_m2m',
            field=models.ManyToManyField(to='aema_db.Pot', blank=True),
        ),
        migrations.AddField(
            model_name='burialindividuals',
            name='site_type',
            field=models.ForeignKey(verbose_name=b'Grave type', blank=True, to='aema_db.SiteTypeSpecific', null=True),
        ),
        migrations.AddField(
            model_name='burialindividualdates',
            name='individual',
            field=models.ForeignKey(to='aema_db.BurialIndividuals'),
        ),
        migrations.AddField(
            model_name='burialimage',
            name='burial_fk',
            field=models.ForeignKey(to='aema_db.Burials'),
        ),
        migrations.AddField(
            model_name='burialimage',
            name='type',
            field=models.ForeignKey(blank=True, to='aema_db.BurialImageType', null=True),
        ),
        migrations.AddField(
            model_name='burialdates',
            name='burial',
            field=models.ForeignKey(to='aema_db.Burials'),
        ),
        migrations.AddField(
            model_name='area',
            name='region_fk',
            field=models.ForeignKey(blank=True, to='aema_db.Region', null=True),
        ),
        migrations.AddField(
            model_name='abrazofernandoraw',
            name='etymologydescription',
            field=models.ManyToManyField(to='aema_db.EtymologyDescription', verbose_name=b'Etymology description'),
        ),
        migrations.AddField(
            model_name='abrazofernandoraw',
            name='toponyms',
            field=models.ManyToManyField(to='aema_db.Toponyms', blank=True),
        ),
        migrations.AlterUniqueTogether(
            name='organicmaterial',
            unique_together=set([('master', 'sub_class')]),
        ),
    ]
